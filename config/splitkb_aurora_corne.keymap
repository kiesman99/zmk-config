#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_rect_max {
            bindings = <&kp LC(LA(ENTER))>;
            key-positions = <3>;
            layers = <4>;
        };

        combo_rect_right {
            bindings = <&kp LC(LA(RIGHT))>;
            key-positions = <4>;
            layers = <4>;
        };

        combo_rect_left {
            bindings = <&kp LC(LA(LEFT))>;
            key-positions = <2>;
            layers = <4>;
        };
    };

    behaviors {
        hrt: hrt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
        };
    };

    macros {
        closeHtml: closeHtml {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp GT>;
            label = "CLOSEHTML";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE     &kp Q                &kp W            &kp F            &kp P              &kp B        &kp J        &kp L               &kp U             &kp Y             &kp SQT       &kp BSPC
&kp LG(SPACE)  &hrt LEFT_CONTROL A  &hrt LEFT_ALT R  &hrt LEFT_GUI S  &hrt LEFT_SHIFT T  &kp G        &kp M        &hrt RIGHT_SHIFT N  &hrt RIGHT_GUI E  &hrt RIGHT_ALT I  &hrt RCTRL O  &kp SQT
&kp LSHFT      &kp Z                &kp X            &kp C            &kp D              &kp V        &kp K        &kp H               &kp COMMA         &kp DOT           &kp FSLH      &tog 1
                                                     &lt 6 ESCAPE     &lt 4 SPACE        &lt 5 TAB    &lt 2 ENTER  &lt 5 BACKSPACE     &lt 3 DEL
            >;
        };

        QWERTY {
            bindings = <
&trans  &kp Q         &kp W            &kp E            &kp R              &kp T     &kp Y   &kp U               &kp I             &kp O             &kp P                 &trans
&trans  &hrt LCTRL A  &hrt LEFT_ALT S  &hrt LEFT_GUI D  &hrt LEFT_SHIFT F  &kp G     &kp H   &hrt RIGHT_SHIFT J  &hrt RIGHT_GUI K  &hrt RIGHT_ALT L  &hrt RCTRL SEMICOLON  &trans
&trans  &kp Z         &kp X            &kp C            &kp V              &kp B     &kp N   &kp M               &kp COMMA         &kp DOT           &kp FSLH              &trans
                                       &trans           &trans             &trans    &trans  &trans              &trans
            >;
        };

        Number {
            bindings = <
&trans  &trans  &kp N7        &kp N8  &kp N9        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1        &kp N2  &kp N3        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &kp N0        &trans    &trans  &trans  &trans
            >;
        };

        Function {
            bindings = <
&trans  &kp F13  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Navigation {
            bindings = <
&trans                    &trans  &trans  &trans     &trans     &trans       &none               &kp PAGE_DOWN   &kp UP_ARROW  &kp PAGE_UP  &none          &none
&trans                    &trans  &trans  &trans     &trans     &trans       &kp LA(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT    &kp LA(RIGHT)  &trans
&kp LS(LG(LC(NUMBER_4)))  &trans  &trans  &kp LG(X)  &kp LG(C)  &kp LG(V)    &trans              &trans          &trans        &trans       &trans         &trans
                                          &trans     &trans     &trans       &trans              &trans          &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &kp SQT                 &kp LESS_THAN    &kp GREATER_THAN  &kp DOUBLE_QUOTES      &kp PERIOD    &kp AMPERSAND  &kp SEMICOLON           &kp LEFT_BRACKET            &kp RIGHT_BRACKET            &kp PERCENT          &trans
&trans  &hrt LCTRL EXCLAMATION  &hrt LALT MINUS  &hrt LGUI PLUS    &hrt LEFT_SHIFT EQUAL  &kp HASH      &kp PIPE       &hrt RIGHT_SHIFT COLON  &hrt RGUI LEFT_PARENTHESIS  &hrt RALT RIGHT_PARENTHESIS  &hrt RCTRL QUESTION  &trans
&trans  &kp CARET               &kp SLASH        &kp ASTERISK      &kp BSLH               &kp GRAVE     &kp TILDE      &kp DOLLAR              &kp LEFT_BRACE              &kp RIGHT_BRACE              &kp AT_SIGN          &trans
                                                 &trans            &trans                 &trans        &trans         &trans                  &trans
            >;
        };

        Music {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans             &trans    &trans        &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_PP  &kp C_VOL_UP  &kp C_NEXT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans             &trans    &trans        &trans      &trans
                        &trans  &trans  &trans    &trans          &trans             &trans
            >;
        };
    };
};
