#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_rect_max {
            bindings = <&kp LC(LA(ENTER))>;
            key-positions = <3>;
            layers = <5>;
        };

        combo_rect_right {
            bindings = <&kp LC(LA(RIGHT))>;
            key-positions = <4>;
            layers = <5>;
        };

        combo_rect_left {
            bindings = <&kp LC(LA(LEFT))>;
            key-positions = <2>;
            layers = <5>;
        };
    };

    behaviors {
        hrt: hrt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
        };
    };

    macros {
        closeHtml: closeHtml {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp GT>;
            label = "CLOSEHTML";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE     &kp Q                &kp W            &kp F            &kp P              &kp B        &kp J        &kp L               &kp U             &kp Y             &kp SQT       &kp BSPC
&kp LG(SPACE)  &hrt LEFT_CONTROL A  &hrt LEFT_ALT R  &hrt LEFT_GUI S  &hrt LEFT_SHIFT T  &kp G        &kp M        &hrt RIGHT_SHIFT N  &hrt RIGHT_GUI E  &hrt RIGHT_ALT I  &hrt RCTRL O  &kp SQT
&kp LSHFT      &kp Z                &kp X            &kp C            &kp D              &kp V        &kp K        &kp H               &kp COMMA         &kp DOT           &kp FSLH      &kp ESC
                                                     &lt 7 ESCAPE     &lt 5 SPACE        &lt 6 TAB    &lt 3 ENTER  &lt 6 BACKSPACE     &lt 4 DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        Number {
            bindings = <
&trans  &trans  &kp N7        &kp N8  &kp N9        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1        &kp N2  &kp N3        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &kp N0        &trans    &trans  &trans  &trans
            >;
        };

        Function {
            bindings = <
&trans  &kp F13  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Navigation {
            bindings = <
&trans                    &trans  &trans  &trans  &trans  &trans    &kp LG(X)  &kp LG(C)  &kp LG(V)     &kp LG(Z)  &kp LG(LS(Z))  &kp LC(LG(Q))
&trans                    &trans  &trans  &trans  &trans  &trans    &kp LEFT   &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans         &trans
&kp LS(LG(LC(NUMBER_4)))  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans        &trans     &trans         &trans
                                          &trans  &trans  &trans    &trans     &trans     &trans
            >;
        };

        Symbol {
            bindings = <
&trans  &kp SQT                 &kp LESS_THAN    &kp GREATER_THAN  &kp DOUBLE_QUOTES      &kp PERIOD    &kp AMPERSAND  &kp SEMICOLON           &kp LEFT_BRACKET            &kp RIGHT_BRACKET            &kp PERCENT          &trans
&trans  &hrt LCTRL EXCLAMATION  &hrt LALT MINUS  &hrt LGUI PLUS    &hrt LEFT_SHIFT EQUAL  &kp HASH      &kp PIPE       &hrt RIGHT_SHIFT COLON  &hrt RGUI LEFT_PARENTHESIS  &hrt RALT RIGHT_PARENTHESIS  &hrt RCTRL QUESTION  &trans
&trans  &kp CARET               &kp SLASH        &kp ASTERISK      &kp BSLH               &closeHtml    &kp TILDE      &kp DOLLAR              &kp LEFT_BRACE              &kp RIGHT_BRACE              &kp AT_SIGN          &trans
                                                 &trans            &trans                 &trans        &trans         &trans                  &trans
            >;
        };

        Music {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans             &trans    &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_VOLUME_DOWN  &kp C_PP  &kp C_VOL_UP  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans             &trans    &trans        &trans  &trans
                        &trans  &trans  &trans    &trans  &trans             &trans
            >;
        };
    };
};
